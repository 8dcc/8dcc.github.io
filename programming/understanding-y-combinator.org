#+TITLE: Understanding the Y combinator
#+AUTHOR: 8dcc
#+OPTIONS: toc:nil
#+STARTUP: nofold
#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../img/favicon.png">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css">

[[file:../index.org][Index]] | [[file:index.org][Up]]

-----

#+TOC: headlines 2

* Quick introduction to lambda calculus
:PROPERTIES:
:CUSTOM_ID: quick-introduction-to-lambda-calculus
:END:

*Lambda calculus* (\lambda-calculus) is a mathematical system for computation
based on _function abstraction_ and _application_, using _variable binding_ and
substitution.[fn:1]

** Rules
:PROPERTIES:
:CUSTOM_ID: rules
:END:

The beauty of lambda calculus is its simplicity. These are the only 3 rules:

1. $x$: A *variable* represents a parameter.
2. $(\lambda x. M)$: A *lambda abstraction* is an anonymous function, with a
   parameter $x$ (between the \lambda and the dot), that returns the body $M$.
3. $(M\ N)$: An *application* of function $M$ to an argument $N$.

In the last rule, both $M$ and $N$ are lambda terms.

** Lambda terms
:PROPERTIES:
:CUSTOM_ID: lambda-terms
:END:

A *lambda term* is just a valid expression in the lambda calculus system. Well,
what makes an expression valid? The following 3 rules are used to determine if a
lambda expression is valid:

1. A *variable* $x$ is itself a valid lambda term.
2. If $M$ is a lambda term, and $x$ is a variable, then $(\lambda x. M)$ is also
   a lambda term (An *abstraction*).
3. If $M$ and $N$ are lambda terms, then $(M\ N)$ is also a lambda term (An
   *application*).

You can begin to feel the recursive magic of lambda calculus, before even
getting into an example.

** Reduction operations
:PROPERTIES:
:CUSTOM_ID: reduction-operations
:END:

Lambda calculus also has 2 main reduction operations:

1. $(\lambda x. M[x])$ \to $(\lambda y. M[y])$: *Alpha conversion*
   (\alpha-conversion), renaming the bound variables in the expression. Used to
   avoid name collisions.
2. $((\lambda x. M) N)$ \to $(M[x := N])$: *Beta reduction* (\beta-reduction),
   replacing the bound variables ($x$) with the argument expression ($N$) in the
   body ($M$) of the abstraction.

There is also *eta reduction* (\eta-reduction), which expresses the idea of
/extensionality/,[fn:2] which applied to this context establishes that two
functions are the same if and only if they give the same result for all
arguments.

[[*Applications of the Y combinator][Later]] we will also mention the opposite of the beta reduction, the *beta
abstraction*, which instead of simplifying an expression, it adds an extra
function call that might be useful (e.g. in Lisps) for delaying the evaluation
of the arguments.

** Notation
:PROPERTIES:
:CUSTOM_ID: notation
:END:

For understanding lambda notation, you will also have to keep in mind these
conventions:

1. Outermost parentheses are dropped: $M N$ instead of $(M N)$.
2. Applications are assumed to be left associative: $M N P$ instead of
   $((M N) P)$.
3. The body of an abstraction extends as far right as possible:
   $(\lambda x. M N)$ means $(\lambda x. (M N))$ and not $((\lambda x. M) N)$.
4. A sequence of abstractions is contracted:
   $(\lambda x. \lambda y. \lambda z. N)$ is abbreviated as
   $(\lambda x\ y\ z. N)$.
5. When all variables are single-letter, the space in applications may be
   omitted: $(M N P)$ instead of $(M\ N\ P)$.

Some of these look a bit confusing to me, specially when embedding expressions
in text, so I will try to make each expression as readable as possible.

* SICP, Lisp and JavaScript
:PROPERTIES:
:CUSTOM_ID: sicp-lisp-and-javascript
:END:

[[https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs][Structure and Interpretation of Computer Programs]] is an amazing book by Harold
Abelson and Gerald Jay Sussman. The book teaches the fundamental principles of
computer programming, including recursion, abstraction, modularity, and much
more. I recommend the book to anyone who is interested in programming, I am sure
they will learn something.

This book has two editions. The first one uses [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] (a dialect of [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]]), for
its examples and explanations, while the second uses [[https://en.wikipedia.org/wiki/JavaScript][JavaScript]]. I have not
programmed much in JavaScript at the time of writing this, but I will try to
provide all examples in both lambda notation, Scheme and JavaScript.

At one point, in section 1.3.3, they talk about finding fixed points of
functions. This was the first time I heard about this, and it's what mainly
motivated me to write this article. If you are interested on the general Lisp
approach, and not on the Y combinator itself, I recommend you check it out.

One of the most valuable things that SICP has taught me is that sometimes it's
extremely useful to treat functions as black boxes that are able to transform
some inputs into some outputs. They call this /wishful thinking/, and it has been
useful not only when using functions, but also when designing them.

* Simple example: Factorial
:PROPERTIES:
:CUSTOM_ID: simple-example-factorial
:END:

This is the function for calculating the factorial of a number $n$, using the
lambda calculus notation:

$$
\text{fact} = \lambda n. \Big(\Big(\text{iszero}\ n\Big) 1 \Big(\text{mult}\ n
\ \big(\text{fact}\ (\text{prec}\ n)\big)\Big)\Big)
$$

#+begin_comment
NOTE: If this is incorrect or confusing, and you have any suggestions, feel free
to make a PR.
#+end_comment

In Scheme:

#+begin_src scheme
(define fact
  (lambda (n)
    (if (equal? n 0)
        1
        (mult n (fact (prec n))))))
#+end_src

Or in JavaScript:

#+begin_src javascript
var fact = (n) => (n == 0)
    ? 1
    : mult(n, (fact(prec(n))));
#+end_src

We are defining =fact= as a function that takes a parameter =n=. This function
returns 1 if =n= is zero, and otherwise multiplies =n= by the factorial of the
number preceding =n=.

In this case, we can simply ignore how =iszero=, =mult=, =prec= and even =fact= work
/internally/, we just have to trust that they do what we expect. Another useful
way of thinking about lambda calculus and Lisp in general is as a language for
expressing processes.

In any case, we don't have those name-defining commodities in lambda calculus. A
function can't call itself by name, so we will have to find an alternative way.

* Simple recursion with anonymous functions
:PROPERTIES:
:CUSTOM_ID: simple-recursion-with-anonymous-functions
:END:

Before trying to understand the Y combinator, let's have a look at an example of
how an anonymous function might call itself without the need for symbols.

$$
(\lambda x. x\ x)(\lambda x. x\ x)
$$

Or in Scheme:

#+begin_src scheme
((lambda (x) (x x))
 (lambda (x) (x x)))
#+end_src

#+begin_quote
*Note:* Depending on the Lisp, you might need to use =(funcall x x)= instead of
=(x x)=, since variables and functions don't share the same namespace. You can
search about the differences between Lisp-1 and Lisp-2.
#+end_quote

Or in JavaScript:

#+begin_src javascript
((x) => x(x))((x) => x(x))
#+end_src

#+begin_comment
NOTE: I am not sure if this expression has a name, feel free to make a PR.
#+end_comment

We can see that the two parenthesized expressions are identical, and that the
first is applied to the second one. Let's try to simplify it by
\beta-reduction. The first parenthesized expression, is applied to the second
one. We replace each occurrence of $x$ in the body of the first expression with
the whole second parenthesized expression.

[[file:../img/ycombinator1.png]]

We are right back where we started. This function would call itself
indefinitely, and a similar form will be used for the Y combinator bellow.
* Fixed points
:PROPERTIES:
:CUSTOM_ID: fixed-points
:END:

Before getting into the fixed-point combinators, we need to define what a fixed
point is.

A fixed point of function $f$ is a value that is mapped to itself by the
function.[fn:4] In other words, $x$ is a fixed point of $f$ if $f(x) = x$. For
this to be possible, $x$ has to belong to both the _domain_ of $f$ (set of values
that it can take), and the _codomain_ of $f$ (set of values that it can return).

For example, if $f(x) = x!$, 1 and 2 are fixed points, since $f(1) = 1$ and
$f(2) = 2$.

#+ATTR_HTML: :width 250px
[[file:../img/ycombinator2.png]]

The image shows the graph of a function $f$, with 3 fixed points. When plotting
with $y = f(x)$, these 3 points were also on the line $x = y$.

For example, for some functions $f$, we can locate a fixed point by beginning
with an initial guess and applying $f$ repeatedly.

$$
f(x),\quad f(f(x)),\quad f(f(f(x))),\quad ...,
$$

We would do that until the value doesn't change very much, and we are satisfied
with the result.

* Fixed-point combinators
:PROPERTIES:
:CUSTOM_ID: fixed-point-combinators
:END:

A *fixed-point combinator* is a higher-order function (i.e. a function that takes
a function as argument) that returns some fixed point of its argument
function.[fn:3]

So, if a function =fix= is a fixed-point combinator, a function =f= has one or
more fixed points, then =fix(f)= is one of these fixed points:

$$
f(\text{fix}\ f) = \text{fix}\ f
$$

In lambda calculus, every function has a fixed point.

* Y combinator
:PROPERTIES:
:CUSTOM_ID: y-combinator
:END:

An example of a fixed-point combinator is the Y combinator. This is the
definition of $Y$.

$$
Y = \lambda f. \big(\lambda x. f (x\ x)\big) \big(\lambda x. f (x\ x)\big)
$$

Or in Scheme:

#+begin_src scheme
(define Y
  (lambda (f)
    ((lambda (x) (f (x x)))
     (lambda (x) (f (x x))))))
#+end_src

#+begin_quote
*Note:* This version is not accurate, see [[*Applications of the Y combinator][Applications of the Y combinator]] bellow.
#+end_quote

Or in JavaScript:

#+begin_src javascript
var Y = (f) =>
    ((x) => f(x(x)))(
     (x) => f(x(x)));
#+end_src

Since it's a fixed-point combinator, calling $Y$ with a function as its
argument would be reduced to $Y\ f = f(Y\ f)$. This is a very interesting and
useful concept, and it's where this image comes from.

#+ATTR_HTML: :width 250px
[[file:../img/ycombinator3.png]]

Let's try to understand what it does, and why it's a fixed-point combinator. We
are saying that $Y$ is a function that takes one parameter $f$. The body
consists of the same lambda term applied to itself: $(\lambda x. f(x\ x))$. You
may realize why we explained how to do [[*Simple recursion with anonymous functions][recursion with anonymous functions]]
earlier. A similar principle applies here, but we are also calling the $f$
function.

Let's simplify it with \beta-reduction step by step:

\begin{align*}
Y\ g &= \lambda f. \big(\lambda x. f (x\ x)\big) \big(\lambda x. f (x\ x)\big) g
        && \text{By definition of } Y \\
     &= \big(\lambda x. g (x\ x)\big) \big(\lambda x. g (x\ x)\big)
        && \text{By beta reduction: Replacing } f \text{ of } Y \text{ with } g \\
     &= g \Big(\big(\lambda x. g (x\ x)\big) \big(\lambda x. g (x\ x)\big)\Big)
        && \text{By beta reduction: Replacing } x \text{ of the first function with } \big(\lambda x. g (x\ x)\big) \\
     &= g (Y\ g)
        && \text{By equality}
\end{align*}

Note how the reduction on the third step is applying $g$ to the same expression
in the second step, which we know is equal to $Y\ g$. That's how we can verify
that $Y\ g = g(Y\ g)$.

An alternative (and slightly simpler) version of the Y combinator is the
following:

$$
X = \lambda f. (\lambda x. x\ x) (\lambda x. f(x\ x))
$$

Notice how the first call to $f$ was not necessary, since this expression also
\beta-evaluates to the Y combinator.

* Applications of the Y combinator
:PROPERTIES:
:CUSTOM_ID: applications-of-the-y-combinator
:END:

You might be wondering what makes the Y combinator so special. As we said,
lambda calculus doesn't have any kind of "global symbols", therefore a function
can't reference itself by name. Let's go back to the factorial example in
Scheme.

#+begin_src scheme
(define fact
  (lambda (n)
    (if (equal? n 0)
        1
        (* n (fact (- n 1))))))
#+end_src

This recursive form is possible because =fact= can call itself using its name.

The Y combinator allows us to call a function recursively in a language which
*doesn't implement recursion*. Let's have a look at an alternative form of =fact=.

#+begin_src scheme
(define fact-generator
  (lambda (self)
    (lambda (n)
      (if (equal? n 0)
          1
          (* n (self (- n 1)))))))
#+end_src

Let's carefully look at what' we just defined. We are defining =fact-generator= as
a function that *does not* return the factorial of a number, but instead returns
another *another lambda function* that will take a number =n=, and return its
factorial. This inner lambda is able to use recursion /without/ referencing itself
by name because it can access the =self= parameter of the outer lambda.

Let's look at how this generator should be used. We want to define =fact=, which
is the actual factorial function that takes a number as its parameter and
returns the factorial. That's what the inner lambda does, the one returned by
=fact-generator=. However, the generator expects to receive the =fact= function as
its =self= parameter, so the inner lambda can reference itself. At first sight, we
could try something like this.

#+begin_src scheme
;; Wrong.
(define fact
  (fact-generator fact))
#+end_src

Here, we would pass the =fact= function to the =fact-generator= so it's able to
return a =fact= that can reference itself. Unfortunately, we can't pass =fact= to
the =fact-generator= because we still haven't defined what =fact= is (we are doing
just that). Instead, since =fact-generator= returns =fact= but also expects it, we
are looking for something like:

#+begin_src scheme
(define fact
  (fact-generator (fact-generator (fact-generator ...))))
#+end_src

Does that look familiar? Indeed, this is just what the Y combinator allows us to
do.

However, our Scheme version of the Y combinator was not really correct. In
Scheme (and in most Lisps), the parameters are evaluated *before* applying the
function, so defining =Y= like we did before would cause infinite recursion when
trying to apply the =(x x)= expressions. This will be more obvious when analyzing
the combinator bellow, so let's look at a possible solution first.

#+begin_comment
TODO: Add link to eval-apply cycle if I write an article about something
similar.
#+end_comment

We can fix our Y combinator by *beta abstracting* those two applications.[fn:5]

#+begin_quote
If you have a function =F= in Scheme, you can define a totally equivalent function
=G= by =(define G (lambda (args) (F args)))=. We say that =G= is a /beta abstraction/ of
=F=, or that =F= is a /beta reduction/ of =G=.

The usual reason you would beta abstract a function in Scheme is in order to
delay the evaluation of its body, just what the doctor ordered.
#+end_quote

We can add this beta abstraction to the =(x x)= applications, effectively acting
as a "proxy".

#+begin_src scheme
(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (n) ((x x) n))))
     (lambda (x) (f (lambda (n) ((x x) n)))))))
#+end_src

This might be hard to understand at first, so let's try to understand it
visually. This diagram represents the process of the inner lambdas in the
function.

[[file:../img/ycombinator4.svg]]

Let me explain each step of the diagram.

1. We know that the lambda will receive a copy of itself as the argument =x=, as
   we have seen [[*Simple recursion with anonymous functions][above]] with the $(\lambda x. x\ x)(\lambda x. x\ x)$ expression.
2. With /wishful thinking/, you can think of the =(x x)= expressions as =fact=, since
   this is what the current expression will be returning. This will make more
   sense bellow, but for now you will have to trust that this will return =fact=.
3. The =(lambda (n) (fact n))= expression acts as a proxy, receiving some
   arguments, in this case =n=, and calling =fact= with them. We name this simple
   lambda =fact-proxy=, and calling it is essentially the same as calling =fact=.
4. We know that =f= is the function that has been passed to =Y=, in this case
   =fact-generator=. We substitute the name for readability. We can also
   substitute =fact-proxy= with just =fact=.
5. Finally, the expression returned by =(fact-generator fact)= gets passed to
   another lambda, or returned by =Y=, depending on whether or not we are the
   first call in the recursive cycle.

With this, we can see that =(Y fact-generator)= will return =(fact-generator fact)=,
which returns a recursive =fact= function, even though =fact= has not been defined
yet.

Now that you know what the expression returns, you can verify that the second
point was true. The =(x x)= expression is calling =x= with a copy of the expression
as argument (the gray expression at the top). That argument will be used
exclusively for looping, as mentioned in point one. Therefore =x=, which is a
lambda just like us, returns =fact=. That's why we were able to replace =(x x)= with
=fact= on point two.

We know the =(x x)= call returns =fact=, but Scheme will try to evaluate the call to
=x=, which also contains another call to =x=, etc. That's what the =fact-proxy= is
for.

With this example, you can also realize that the following expression makes more
sense now.

\begin{align*}
Y f &= f (Y f) \\
    &= f (f (f (...)))
\end{align*}

Which is just what we wanted to achieve earlier.

#+begin_src scheme
(define fact
  (fact-generator (fact-generator (fact-generator ...))))
#+end_src

Finally, we can [[https://try.scheme.org/][try]] our full example.

#+begin_src scheme
(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (n) ((x x) n))))
     (lambda (x) (f (lambda (n) ((x x) n)))))))

(define fact-generator
  (lambda (self)
    (lambda (n)
      (if (equal? n 0)
          1
          (* n (self (- n 1)))))))

(define fact
  (Y fact-generator))

(fact 5)
#+end_src

If you reached this far, I hope you have learned something. If you feel like
some explanations could be improved, feel free to [[file:../index.org::#contributing][contribute]].

# -----

[fn:1] See the [[https://en.wikipedia.org/wiki/Lambda_calculus][Wikipedia page]] for lambda calculus.
[fn:2] See the [[https://en.wikipedia.org/wiki/Extensionality][Wikipedia page]] for extensionality.
[fn:3] See the [[https://en.wikipedia.org/wiki/Fixed-point_combinator][Wikipedia page]] for fixed-point combinator.
[fn:4] See the [[https://en.wikipedia.org/wiki/Fixed_point_(mathematics)][Wikipedia page]] for fixed point.
[fn:5] See [[https://jao.io/blog/2014/08/06/spj-s-y-combinator-in-scheme/][jao.io]] article about the Y combinator in Scheme, and about how to
design good websites.

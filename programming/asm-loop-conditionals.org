#+TITLE: Optimizing loop conditions in assembly
#+AUTHOR: 8dcc
#+OPTIONS: toc:nil
#+STARTUP: nofold
#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../img/favicon.png">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css">

[[file:../index.org][Index]] | [[file:index.org][Up]]

-----

#+TOC: headlines 2

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

I found a way to improve the logic of my conditional loops in my [[https://github.com/8dcc/scratch/blob/fa3168aaa84ea954df1b7c1b225fe947ad169d45/C/misc/bf2nasm/bf2nasm.c][bf2nasm]]
project, and I decided to write about it. There is a LaTeX and PDF version of
this article in the same folder as =bf2nasm.c=. Since it's a bit hidden, I decided
to write an article on here as well.

* Pretested and posttested loops
:PROPERTIES:
:CUSTOM_ID: pretested-and-posttested-loops
:END:

When I was reading /Reversing: Secrets of Reverse Engineering/, I found this part
specially interesting:

#+begin_quote
*Eldad Eilam. (2005). /Reversing: Secrets of Reverse Engineering/ (pp. 56-57).*

The most common high-level loop construct is the pretested loop, where the
loop's condition is tested before the loop's body is executed. The problem with
this construct is that it requires an extra unconditional jump at the end of the
loop's body in order to jump back to the beginning of the loop (for comparison,
posttested loops only have a single conditional branch instruction at the end of
the loop, which makes them more efficient). Because of this, it is common for
optimizers to convert pretested loops to posttested loops. In some cases, this
requires the insertion of an if statement before the beginning of the loop, so
as to make sure the loop is not entered when its condition isn't satisfied.
#+end_quote

The compiler will sometimes optimize the following pretested loop:

#+begin_src C
while (a != b) {
    /* ... */
}
#+end_src

Into this posttested loop inside a conditional.

#+begin_src C
if (a != b) {
    do {
        /* ... */
    } while (a != b);
}
#+end_src

The assembly for the first loop would be something like:

#+begin_src nasm
.loop:
    cmp A, B
    je .done
    ; ...
    jmp .loop
.done:
#+end_src

And the assembly for the second loop could be translated literally to something
like:

#+begin_src nasm
    cmp A, B
    je .done
.loop:
    ; ...
    cmp A, B
    jne .loop
.done:
#+end_src

As mentioned in the quote, on the first loop there is a conditional jump and an
unconditional one, while in the second one, the first condition is tested once
before the loop, and the loop only has one conditional jump. If the condition
fails on the second loop, the jump will not be performed and the execution will
continue at the =done= label.

* Brainfuck loops
:PROPERTIES:
:CUSTOM_ID: brainfuck-loops
:END:

In brainfuck, loops are defined with square brackets. The code inside the loop
will be ran as long as the value at the current cell is not zero. At first, I
thought this was a posttested loop, but this is wrong. The loops are pretested,
meaning that the loop will be jumped over entirely if the value at the current
cell is not zero.

When the program encounters a loop start, the following assembly is generated:

#+begin_src nasm
    jmp .check_N
.loop_N:
    ; ...
.check_N:
    cmp byte [rcx], 0
    jnz .loop_N
#+end_src

Where $N$ is the loop counter.

That way, we even avoid the first comparison from the other example, and we jump
directly to the "end" of the loop, where the condition is checked. Now we only
make an "extra" unconditional jump once, for checking the condition the first
time when entering the loop.

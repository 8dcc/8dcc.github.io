#+TITLE: Reversing TF2's bSendPacket
#+AUTHOR: 8dcc
#+OPTIONS: toc:nil
#+STARTUP: nofold
#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../img/favicon.png">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css">

[[file:../index.org][Index]] | [[file:index.org][Up]]

-----

#+TOC: headlines 2

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

Team Fortress 2 (TF2) is a 2007 multiplayer first-person shooter game developed
and published by Valve Corporation ([[https://en.wikipedia.org/wiki/Team_Fortress_2][Wikipedia]]).

On [[https://github.com/8dcc/tf2-cheat/commit/0daa5bb7b03abf0ae8b150312f0147eb7ef5a148][Aug 6, 2023]], I started working on a TF2 cheat for GNU/Linux, and in over 600
commits, I was pretty happy with the result.

However, on April 19, 2024 (just a few days before writing this), Valve released
a 64-bit update. For windows, this just meant an extra architecture, but on
GNU/Linux, they entirely removed the 32-bit binaries. I decided to archive the
repository and continue developing the cheat privately.

One of the main reasons for this decision was that I wanted to avoid essentially
releasing fixes for the cheat, that would get used by people who are just
interested in copy-pasting a working cheat and selling it, or making [[https://www.theverge.com/2022/5/27/23144061/valve-team-fortress-2-bot-problem-savetf2-spam][bots]]. As I
explained in the repository's README, I made this project because I enjoyed
reversing the game in a platform with not much reference, and I enjoyed the low
level aspect of essentially having to do all the "dirty work" of reversing the
game and making everything work.

However, It is not fair to say that I was the only one involved, and obviously
some people did help me greatly. I just want to quickly mention [[https://github.com/Lak3][Lak3]] for his
time and help, and [[https://github.com/nepcat][nepcat]] for his helpful PRs, and his interest in the project.

Now that this long introduction is finished, we can get to finding =bSendPacket=.

* The problem
:PROPERTIES:
:CUSTOM_ID: the-problem
:END:

First, in case the reader is unfamiliar with game hacking in the source engine,
I need to briefly explain what =bSendPacket= is used for.

In the source engine, we run a lot of our hacks from the =CreateMove= hook (for
more information about hooking in general, see my [[file:../programming/detour-hooking.org][Detour Hooking]]
entry). However, there is not just one =CreateMove=, and some people choose to
hook one over the other. In my case, I have always hooked
=ClientModeShared::CreateMove=.

Let's have a look at where this is called by looking at the [[https://github.com/OthmanAba/TeamFortress2][leaked TF2 source]].

1. Our =ClientModeShared::CreateMove= function is defined in
   [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/game/client/clientmode_shared.cpp#L417][=clientmode_shared.cpp=]]. As you can see, it calls another =CreateMove=
   function, but we don't care about that one.
2. This =ClientModeShared::CreateMove= function is called from =CInput::CreateMove=,
   defined in [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/game/client/in_main.cpp#L1111][=in_main.cpp=]]. You can see it calls it from a =g_pClientMode= global
   pointer.
3. This =CInput::CreateMove= function is called from =CHLClient::CreateMove=,
   defined in [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/game/client/cdll_client_int.cpp#L1448][=cdll_client_int.cpp=]].
4. Finally, this =CHLClient::CreateMove= function is called from =CL_Move=, defined
   in [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2119][=cl_main.cpp=]].

So, in order, the calls would be the following:

#+begin_example text
CL_Move()  ->  CHLClient::CreateMove()  ->  CInput::CreateMove()  ->  ClientModeShared::CreateMove()
#+end_example

Okay, but why is this important? Let's have a look at this last function,
=CL_Move=. It defines a [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2130][local variable]] called =bSendPacket=, which will later [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2178-L2188][decide]]
if the current command should be sent or, on the other hand, choked. Being able
to control which packets are sent and which ones aren't is extremely useful for
us, so we need to find a way of changing its value.

As I said, this is a *local variable*, so we can't just treat it as a global and
get a pointer to it. This variable is declared within the [[https://en.wikipedia.org/wiki/Call_stack#STACK-FRAME][stack frame]] of
=CL_Move=, and only exists throughout its life cycle. We will need to find a way
of somehow tricking =CL_Move= into thinking that this variable has the value we
want it to have, and ideally do that from =ClientModeShared::CreateMove=.

* The old solution
:PROPERTIES:
:CUSTOM_ID: the-old-solution
:END:

When I started developing my cheat for the 32-bit game, I came across an
(almost) valid solution.

Since =CL_Move= only sets =bSendPacket= to true on [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2130][once place]], we could just
overwrite this constant in memory, so that it gets initialized to true only
whenever we want.

Let's look at the *old 32-bit binary* from IDA. If we open =engine.so=, where
=CL_Move= is located, we can search for the function by looking for the strings
that it uses, and jumping to their xrefs. Then, we can hit the almighty =F5= key
to decompile the function.

[[file:../img/bsendpacket1.png]]

I renamed the variables on the decompiler window (right split), but it should be
pretty clear what does what by comparing it with the source. As we can see by
the opcode bytes on the left split (/Options > General > Number of opcode bytes/),
it's setting =esi= (=bSendPacket=) to true by moving the /immediate/ value =0x00000001=
(note that this is [[https://en.wikipedia.org/wiki/Endianness][little endian]]).

We could get a pointer to where those =01 00 00 00= bytes are in memory, and then
cast it to a =bool*=. To do this, we could, for example, look for a signature in
the game's memory (see my [[file:../programming/signature-scanning.org][Signature Scanning in C]] entry). Once we have this
pointer, we could use it for controlling the packet flow, right?  Not really.

** Flaws with this approach
:PROPERTIES:
:CUSTOM_ID: flaws-with-this-approach
:END:

This approach has a couple of flaws. The first one is that we can't force it to
true, just to false. If we leave it as it was (true), the game might set it to
false later in the function. This is not a problem in our case, but it's
something to keep in mind.

Another problem is that, if we look at the position of the value we are changing
and the position where =CL_Move= calls =CHLClient::CreateMove=, we can see that we
are overwriting the bytes of an instruction that *has already been executed in
this tick*. Therefore, our change will affect the next tick. This is a problem
that I didn't realize until the game updated to 64-bits, and it has probably
caused me a lot of unusual trouble before.

* The new problem
:PROPERTIES:
:CUSTOM_ID: the-new-problem
:END:

Let's have a look at =CL_Move= after the 64-bit update. Again, we search for
strings and check the xrefs.

[[file:../img/bsendpacket2.png]]

We can see that it's moving moving =ebx= (=v3=) into =r12d= (=bSendPacket=), but how do
we know that it's setting it to true?  Let's scroll up a bit.

[[file:../img/bsendpacket3.png]]

As you can see, it's moving the value returned by =sub_5376C0= (=eax=) into =ebx=. If
the =test al, al= is zero (function returned false), it jumps to =loc_47A007=, which
just returns.

The fact that it's moving /true/ from a register instead of an immediate value is
a slight problem, since we can't just patch some =01 00 00 00= bytes. The opcode
bytes for the =mov= instruction are now =41 89 DC=, but we /could/ still patch it.

If we look at the general purpose registers for =x86_64=, we can see that =r12d= is
the *double-word* version of the =r12= register.

| Quad-word | Double-word | Word | Upper byte | Lower byte |
|-----------+-------------+------+------------+------------|
| =rax=       | =eax=         | =ax=   | =ah=         | =al=         |
| =rbx=       | =ebx=         | =bx=   | =bh=         | =bl=         |
| ...       | ...         | ...  | ...        | ...        |
| =r12=       | =r12d=        | =r12w= | /None/       | =r12b=       |

We might be able to find another 3-byte instruction that we can write
there. After a wild guess, I found that =mov r12b, 1= does exactly what we want,
since =bSendPacket= can only be one or zero, and the instruction is only 3 bytes:
=41 b4 01=.

However, as I mentioned before, this solution does not solve the flaws of the
old 32-bit version. We still can't force it to true, and it will only apply for
the next tick, not the current one. Furthermore, it has another disadvantage
compared to the old: Since the instruction is 3 bytes long, and it's not an
immediate value, we can't treat it as a =bool*= like we did before.

* An alternative to opcode patching
:PROPERTIES:
:CUSTOM_ID: an-alternative-to-opcode-patching
:END:

First, we can see that, throughout =CL_Move=, the =r12= register is not used for
anything other than =bSendPacket=. If we look at the System V AMD64 ABI
([[https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI][Wikipedia]], [[https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf][PDF]]), we can read the following:

#+begin_quote
*System V AMD64 ABI - 3.2.1 Registers and the Stack Frame*

Registers =rbp=, =rbx= and =r12= through =r15= "belong" to the calling function and the
called function is required to preserve their values. In other words, a called
function must preserve these registers' values for its caller.
#+end_quote

That's good news. That means that /theoretically/, if the functions between
=ClientModeShared::CreateMove= and =CL_Move= don't use =r12=, it would remain
unchanged. On the other hand, if a child function want's to modify =r12=
(=bSendPacket=) it will have to push it onto the stack, and pop it before
returning.

And more good news, if we look at the source of =CL_Move=, we can see that the
[[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2178-L2192][=bSendPacket= checks]] happen after the [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/engine/cl_main.cpp#L2165-L2169][=CHLClient::CreateMove= call]] is made. That
means we could change the value of =bSendPacket= and the changes would take effect
on the current tick.

Let's hope for the best and start looking at each function.

** Finding and analyzing =CHLClient::CreateMove=
:PROPERTIES:
:CUSTOM_ID: finding-and-analyzing-chlclient-createmove
:END:

If we open the 64-bit =client.so= in IDA, we can go to the =CHLClient=
[[https://en.wikipedia.org/wiki/Virtual_method_table][Virtual Method Table]] (VMT) thanks to to [[https://en.wikipedia.org/wiki/Run-time_type_information][RTTI]] and start checking those
functions. Some plugin like [[https://sourceforge.net/projects/idafunctionstringassociate/][Function String Associate]] might come in handy for
looking at the strings in surrounding functions from the VMT.

After a bit of decompiling, we can find that it's on index 21 (since
=(0x26B2178-0x26B20D0)/8= is 21).

[[file:../img/bsendpacket4.png]]

As you can see, it matches the source of [[https://github.com/OthmanAba/TeamFortress2/blob/1b81dded673d49adebf4d0958e52236ecc28a956/tf2_src/game/client/cdll_client_int.cpp#L1448][=CHLClient::CreateMove=]]. We can
probably tell that =off_2D65868[0]= is =CInput=, since it's also passing it as the
=thisptr= parameter.

If we look at the actual disassembly, we find some bad news.

[[file:../img/bsendpacket5.png]]

Indeed, the =r12= register is being pushed to the stack and then used as a local
variable for this function. Well... Shit.

Not all is lost, though. It would have been easy to just modify the unchanged
=r12= register, but we can still access its value *from the stack*.

* Finding the right offset in the stack
:PROPERTIES:
:CUSTOM_ID: finding-the-right-offset-in-the-stack
:END:

** Understanding the stack
:PROPERTIES:
:CUSTOM_ID: understanding-the-stack
:END:

TODO

#+begin_comment
Insert figure 3.3 of System V AMD64 ABI and Wikipedia stack frame image.
#+end_comment

* Getting the value with an assembly proxy
:PROPERTIES:
:CUSTOM_ID: getting-the-value-with-an-assembly-proxy
:END:

TODO

* Getting the value using GCC's built-ins
:PROPERTIES:
:CUSTOM_ID: getting-the-value-using-gccs-built-ins
:END:

TODO

#+begin_comment
https://gcc.gnu.org/onlinedocs/gcc/Return-Address.html
#+end_comment

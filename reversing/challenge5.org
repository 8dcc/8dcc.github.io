#+TITLE: Challenge 5
#+AUTHOR: 8dcc
#+STARTUP: nofold
#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../img/favicon.png" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: index.html
#+HTML_LINK_HOME: ../index.html

* Original assembly
:PROPERTIES:
:CUSTOM_ID: original-assembly
:END:

Original challenge link: [[https://challenges.re/5/][Click me]].

This is the original function, adapted to fit the [[https://www.nasm.us/][nasm]] syntax.

#+begin_src nasm -n
func:
    cmp     rcx, rsi
    ja      .L10
    sub     rsi, rcx
    add     rsi, 1
    mov     r11, rsi
    je      .L10
    test    rcx, rcx
    jne     .L16
    mov     rax, rdi
    ret
.L10:
    xor     eax, eax
    ret
.L16:
    push    rbx
    xor     r10d, r10d
    mov     r9d, 1
.L4:
    lea     rax, [rdi + r10]
    xor     esi, esi
    xor     r8d, r8d
.L8:
    movzx   ebx, BYTE [rdx + rsi]
    cmp     BYTE [rax + rsi], bl
    cmovne  r8d, r9d
    add     rsi, 1
    cmp     rsi, rcx
    jne     .L8
    test    r8d, r8d
    je      .L12
    add     r10, 1
    cmp     r10, r11
    jne     .L4
    xor     eax, eax
.L12:
    pop     rbx
    ret
#+end_src

* Assembly notes
:PROPERTIES:
:CUSTOM_ID: assembly-notes
:END:

Here are some important notes before converting the code to a higher level
language.

** First checks
:PROPERTIES:
:CUSTOM_ID: first-checks
:END:

As you can see, the first thing the function does is check if =rcx= is greater
than =rsi=. If it is, it returns zero. Otherwise, it subtracts =rcx= from =rsi=, adds
one to =rsi=, and uses another =je= instruction to branch. There are some key
concepts you need to know to understand this:

- The =je= and =jz= instructions are the same. The [[https://www.felixcloutier.com/x86/jcc][opcode]] for both =je rel32= and =jz
  rel32= is =0F 84 cd=.
- Both of these instructions just check the =ZF= bit inside the EFLAGS
  register[fn::See Intel SDM, Vol. 1, Chapter 3.4.3 /EFLAGS Register/ and Vol. 1,
  Chapter 5.1.7 /Control Transfer Instructions/.].
- The =cmp= instruction just subtracts the second operand from the first operand,
  but setting the flags without saving the result in the first operand.
- This flag is not only changed by the =cmp= instruction, but also by other
  instructions like =add=, =sub=, etc.

So in this case, it's checking if =rsi= minus =rcx= plus one is zero or not. In
other words, if =rcx= is equal to =rsi+1=. If it is, it returns zero.

** Function parameters
:PROPERTIES:
:CUSTOM_ID: function-parameters
:END:

We can see that the function has 4 parameters because registers =rdi=, =rsi=, =rdx=
and =rcx= are being used. See [[file:challenge3.org][challenge 3]] for more information on the AMD64 System
V ABI.

Another important thing to note is how we know the types of the function
parameters. We know the first argument (=rdi=) is a pointer because right after
=.L4= it's being used for indexing. We can determine the type of the pointer
because:

- It's not multiplying the index by the size of the elements (e.g. =i*4= for
  arrays of DWORDs), so we can asume the size of each element is one byte.
- Right after =.L8=, you can see it's moving and comparing byte pointers, so it's
  not hard to see that these are =char*=.

** Function return type
:PROPERTIES:
:CUSTOM_ID: function-return-type
:END:

We can tell that the function returns a =char*= because at line 31 of the assembly
code, it's returning without changing the value of =rax=, and the only place it's
modified is at line 20, where it loads the address of a character inside the
string.

The other place where we don't return zero is at line 10, where we return the
first parameter, which as we know is a =char*=.

** Constructing the =for= loops
:PROPERTIES:
:CUSTOM_ID: constructing-the-for-loops
:END:

We can see that the labels =.L4= and =.L8= are being used as loops because of the
conditional jumps at lines 29 and 34 of the assembly code. We can get the loop
conditions right before the jumps.

For the outer loop, the condition is:

#+begin_src C
while (r10 != r11) {
    // ...
}
#+end_src

And for the inner loop, the condition is:

#+begin_src C
while (rsi != rcx) {
    // ...
}
#+end_src


We can tell that they are actually =for= loops because:


- One of the variables used for the loop's condition is initialized before the
  loop starts (before the label used for jumping). In the first loop, the =r10=
  register is initialized to zero (line 17), and in the inner loop, the =rsi=
  register is also initialized to zero (line 21).
- Right before checking the conditions, the loops increment those same variables
  (=rsi= on line 27 and =r10= on line 32).

In my opinion, the best approach when trying to understand a label's purpose is
to look at the places where those labels are being used, and get the
loop/conditional information directly from there.

Also note that the =rsi= variable is now being used as the iterator for the inner
loop, instead of holding the old result of subtracting the arguments. This old
value was stored in the =r11= register on line 6. It's important to know where the
meaning/usage of the registers change.

** Conditional move
:PROPERTIES:
:CUSTOM_ID: conditional-move
:END:

After =.L8=, on line 25, it compares =rax[rsi]= with =rdx[rsi]=, and moves =r9d= to =r8d=
if they are not equal. To do this, it uses the =cmovne= instruction:

#+begin_quote
*CMOVcc â€” Conditional Move*

- =CMOVNE r32, r/m32=: Move if not equal (=ZF= = 0).

Each of the =CMOVcc= instructions performs a move operation if the status flags in
the EFLAGS register (=CF=, =OF=, =PF=, =SF=, and =ZF=) are in a specified state (or
condition). [...] If the condition is not satisfied, a move is not performed and
execution continues with the instruction following the =CMOVcc= instruction.
#+end_quote

* C translation
:PROPERTIES:
:CUSTOM_ID: c-translation
:END:

From the [[file:challenge4.org][previous challenge]], I learned that it's a good approach to first
convert the assembly code into a higher level language like C, and try to figure
out what the function does from there.

#+begin_src C
#include <stdint.h>
#include <stddef.h>

char* func(char* rdi, int rsi, char* rdx, int rcx) {
    if (rcx > rsi)
        /* .L10 */
        return NULL;

    rsi     = (rsi - rcx) + 1;
    int r11 = rsi;

    if (rsi == 0)
        /* .L10 */
        return NULL;

    if (rcx == 0)
        return rdi;

    /* .L16 */
    const int r9 = 1;

    for (int r10 = 0; r10 != r11; r10++) {
        /* .L4 */
        char* rax = &rdi[r10];

        int r8 = 0;
        for (int rsi = 0; rsi != rcx; rsi++) {
            /* .L8 */
            char ebx = rdx[rsi];

            if (rax[rsi] != ebx)
                r8 = r9;
        }

        if (r8 == 0)
            return rax;
    }

    return NULL;
}
#+end_src

After changing some variable names and simplifying:

#+begin_src C
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include <stdio.h>

char* func(char* str1, int n1, char* str2, int n2) {
    if (n2 > n1)
        /* .L10 */
        return NULL;

    n1 = (n1 - n2) + 1;

    /* NOTE: `r11` is just used to store the original `rsi` (n1), since `rsi`
     ,* it's going to be used as iterator for the second loop (j). Since I
     create
     ,* a `j` variable, I don't need this aux variable. */

    if (n1 == 0)
        /* .L10 */
        return NULL;

    if (n2 == 0)
        return str1;

    /* .L16 */
    /* NOTE: r9 is only used once and it's value (true) never changes */

    for (int i = 0; i != n1; i++) {
        /* .L4 */
        char* substring = &str1[i];

        bool failed = false;
        for (int j = 0; j != n2; j++) {
            /* .L8 */
            if (substring[j] != str2[j])
                failed = true;
        }

        if (!failed)
            return substring;
    }

    return NULL;
}

char* result = func("Hello, world!", 13, "world", 5);
printf("%p\n\"%s\"\n", result, result); /* "world!" */
#+end_src

#+RESULTS:
| 0x564f148d0011 |
|         world! |

As we can see, the function is used to return the first match of =str2= inside
=str1=. You also need to provide the lengths of the strings.

Note that the =n1= and =n2= parameters are the lengths of the strings. In the
example we pass 5 instead of 6 (=sizeof("world")=) so ="world\0"= matches ="world!"=.
